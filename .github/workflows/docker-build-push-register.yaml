name: Docker build, push & register task definition

on:
  workflow_dispatch:

permissions:
  id-token: write   # Does not modify or write to any resources, only allows workflow to request (fetch) & use (set) OIDC token
  security-events: write

jobs:
  build-push-register:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/GitHubActions
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build the image
        id: build
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ vars.ECR_REPOSITORY }}
        run: |
          sha=$(git rev-parse --short HEAD)
          primary_tag="$REGISTRY/$REPOSITORY:$sha"
          docker build -t $primary_tag ./app
          echo "primary_tag=$primary_tag" >> $GITHUB_OUTPUT

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ steps.build.outputs.primary_tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          wait-for-processing: true

      - name: Push to Amazon ECR
        run: docker push ${{ steps.build.outputs.primary_tag }}

      - name: Get latest task definition ARN
        id: get-task-def
        run: |
          export LATEST_ARN=$(aws ecs describe-services \
            --cluster url-shortener \
            --services url-shortener-service \
            --query "services[0].taskDefinition" \
            --output text)
          echo "LATEST_ARN=$LATEST_ARN" >> $GITHUB_OUTPUT

      - name: Fetch previous task definition JSON
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ steps.get-task-def.outputs.LATEST_ARN }} \
            --query "taskDefinition" \
            --output json | \
            jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' \
            > old-task-def.json

      - name: Replace image in task definition
        run: |
          jq --arg img "${{ steps.build.outputs.primary_tag }}" \
            '.containerDefinitions[0].image = $img' old-task-def.json > new-task-def.json

      - name: Register new ECS task definition revision
        run: |
          ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json \
            --query "taskDefinition.taskDefinitionArn" \
            --output text)
          echo "ECS task definition arn: $ARN" >> $GITHUB_STEP_SUMMARY
